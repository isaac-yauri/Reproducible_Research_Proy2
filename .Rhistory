library(rpart.plot)
prp(CARTmodel)
CARTmodel = rpart(voting ~ civicduty + hawthorne + self + neighbors, data=gerber)
prp(CARTmodel)
install.packages("rpart.plot")
library(rpart.plot)
CARTmodel = rpart(voting ~ civicduty + hawthorne + self + neighbors, data=gerber)
prp(CARTmodel)
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
CARTmodel2 = rpart(voting ~ civicduty + hawthorne + self + neighbors, data=gerber, cp=0.0)
install.packages("rpart.plot")
library(rpart.plot)
CARTmodel2 = rpart(voting ~ civicduty + hawthorne + self + neighbors, data=gerber, cp=0.0)
prp(CARTmodel2)
CARTmodel3 = rpart(voting ~ sex + civicduty + hawthorne + self + neighbors, data=gerber, cp=0.0)
prp(CARTmodel3)
CARTmodel4 = rpart(voting ~ control, data=gerber, cp=0.0)
CARTmodel5 = rpart(voting ~ control + sex, data=gerber, cp=0.0)
prp(CARTmodel4, digits = 6)
abs(0.296638 - 0.34)
prp(CARTmodel5, digits = 6)
m2 <- glm(voting ~ sex + control,
data = gerber, family = "binomial")
summary(m2)
Possibilities = data.frame(sex=c(0,0,1,1),control=c(0,1,0,1))
predict(LogModelSex, newdata=Possibilities, type="response")
Possibilities = data.frame(sex=c(0,0,1,1),control=c(0,1,0,1))
predict(m2, newdata=Possibilities, type="response")
prp(CARTmodel5, digits = 6)
abs(0.2908065 - 0.290456)
LogModel2 = glm(voting ~ sex + control + sex:control, data=gerber, family="binomial")
summary(LogModel2)
predict(LogModel2, newdata=Possibilities, type="response")
abs(0.2904558 - 0.290456)
letters <- read.csv("C:/EMC/Cursos/Analytics Edge/letters_ABPR.csv")
View(letters)
letters$isB = as.factor(letters$letter == "B")
library(caTools)
set.seed(1000)
split = sample.split(letter$isB, SplitRatio = 0.5)
letter <- letters
letters$isB = as.factor(letters$letter == "B")
library(caTools)
set.seed(1000)
split = sample.split(letter$isB, SplitRatio = 0.5)
Train = subset(letter, split==TRUE)
Test = subset(letter, split==FALSE)
summary(Train)
library(rpart)
library(rpart.plot)
CARTb = rpart(isB ~ . - letter, data=Train, method="class")
PredictCART = predict(CARTb, newdata = Test, type = "class")
table(Test$isB, PredictCART)
letter$letter = as.factor( letter$letter )
# Generating new data
set.seed(2000)
split = sample.split(letter$letter, SplitRatio = 0.5)
Train = subset(letter, split==TRUE)
Test = subset(letter, split==FALSE)
summary(Test)
0.2535302 + 0.2458280 + 0.2573813  + 0.2432606
census <- read.csv("C:/EMC/Cursos/Analytics Edge/census.csv")
View(census)
library(caTools)
set.seed(2000)
split = sample.split(census$over50k, SplitRatio = 0.6)
train = subset(census, split==TRUE)
test = subset(census, split==FALSE)
# Building logistic regression
censusLog = glm(over50k ~ ., data=train, family=binomial)
summary(censusLog)
library(UsingR)
data(father.son)
plot(father.son$fheight, father.son$sheight)
cor(father.son$fheight, father.son$sheight)
identify(father.son$fheight, father.son$sheight)
x = father.son$fheight
y = father.son$sheight
n = nrow(father.son)
plot(scale(x), scale(y))
abline(h=0, v=0)
sum(scale(x) * scale(y)) / (n - 1)
sum(scale(x) * scale(y))
sum(scale(x) * scale(y)) / n
data(nym.2002)
head(nym.2002)
histogram(nym.2002$time)
qqnorm(nym.2002$time)
tail(sort(table(nym.2002$home)),10)
time = sort(nym.2002$time)
summary(time)
max(time/median(time))
min(time/median(time))
babies = read.table("https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/babies.txt", header=TRUE)
bwt.nonsmoke = babies$bwt[babies$smoke==0]
bwt.smoke = babies$bwt[babies$smoke==1]
# QUESTION 1.1
# What is the average length of the confidence interval?
N=30
conf.int<-function(){
sample.bwt.nonsmoke <- sample(bwt.nonsmoke,N)
sample.bwt.smoke <- sample(bwt.smoke,N)
bwt.test <- t.test(sample.bwt.nonsmoke,sample.bwt.smoke)
return (bwt.test$conf.int[2] - bwt.test$conf.int[1])
}
mean(replicate(1000, conf.int()))
# QUESTION 1.2
# How often (what proportion of times) did the confidence intervals contain the population-level difference?
popdiff = mean(bwt.nonsmoke) - mean(bwt.smoke)
N=30
diff.compare<-function(){
sample.bwt.nonsmoke <- sample(bwt.nonsmoke,N)
sample.bwt.smoke <- sample(bwt.smoke,N)
bwt.test <- t.test(sample.bwt.nonsmoke,sample.bwt.smoke)
return (popdiff>bwt.test$conf.int[1] & popdiff<bwt.test$conf.int[2])
}
mean(replicate(1000, diff.compare()))
# QUESTION 1.3
# the difference in means (X.ns - X.s) must have absolute value greater than _____ times sd.diff in order for the result to be significant (at alpha=0.05).
# QUESTION 1.4
# the difference in means (X.ns - X.s) must be a greater distance than _____ times sd.diff away from 0 in order for the 95% confidence interval not to contain 0.
# QUESTION 3.1
# What is the power at alpha=0.1?
N=15
reject <- function(N,alpha){
sample.bwt.nonsmoke <- sample(bwt.nonsmoke,N)
sample.bwt.smoke <- sample(bwt.smoke,N)
pval <- t.test(sample.bwt.nonsmoke,sample.bwt.smoke)$p.value
ifelse(pval < alpha,1,0)
}
mean(replicate(1000,reject(N,0.1)))
# QUESTION 3.2
# What is the power at alpha=0.05?
mean(replicate(1000,reject(N,0.05)))
# QUESTION 3.3
# QUESTION 3.3
# What is the power at alpha=0.01?
mean(replicate(1000,reject(N,0.01)))
# QUESTION 3.4
# What is the expected number of student responses that would be marked wrong simply by chance?
# QUESTION 2.1
# What is the X-squared statistic?
d = read.csv("https://courses.edx.org/c4x/HarvardX/PH525.1x/asset/assoctest.csv")
d = read.csv("https://courses.edx.org/c4x/HarvardX/PH525.1x/asset/assoctest.csv")
d.table <- table(d)
chisq.test(d.table)$statistic
# QUESTION 2.2
# What is the p-value?
fisher.test(d.table)$p.value
babies = read.table("https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/babies.txt", header=TRUE)
bwt.nonsmoke = babies$bwt[babies$smoke==0]
bwt.smoke = babies$bwt[babies$smoke==1]
# QUESTION 1.1
# How often (what proportion of simulations) is the sample variance greater than 1.5 times the population variance?
pop.var = var(bwt.nonsmoke)
vars = replicate(1000, var(sample(bwt.nonsmoke,10)))
mean(vars > pop.var*1.5)
# QUESTION 1.2
# Now use a sample size of 50. How often (what proportion) is the sample variance larger than 1.5 times the population variance?
vars = replicate(1000, var(sample(bwt.nonsmoke,50)))
mean(vars > pop.var*1.5)
# QUESTION 2.1
# QUESTION 2.1
# What is the p-value for the two groups of 50 defined above?
set.seed(0)
N=50
smokers <- sample(babies$bwt[babies$smoke==1],N)
nonsmokers <- sample(babies$bwt[babies$smoke==0],N)
obs <- mean(smokers)-mean(nonsmokers)
avgdiff <- replicate(1000, {
all <- sample(c(smokers,nonsmokers))
smokersstar <- all[1:N]
nonsmokersstar <- all[(N+1):(2*N)]
return(mean(smokersstar) - mean(nonsmokersstar))
})
mean(abs(avgdiff) > abs(obs))
library("dplyr")
# QUESTION 1.1
# What is the median REM proportion of the order with the smallest median REM proportion?
msleep<-read.csv("https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/msleep_ggplot2.csv")
msleep %>%
mutate(rem_proportion = sleep_rem / sleep_total) %>%
group_by(order) %>%
summarise(median_rem_proportion = median(rem_proportion)) %>%
arrange(median_rem_proportion) %>%
head(1)
#======================================================================
# Week 4 Robust summaries
#======================================================================
data(ChickWeight)
chick = reshape(ChickWeight,idvar=c("Chick","Diet"),timevar="Time",direction="wide")
chick = na.omit(chick)
ChickWeight[ChickWeight$Chick==,]
data(ChickWeight)
chick = reshape(ChickWeight,idvar=c("Chick","Diet"),timevar="Time",direction="wide")
chick = na.omit(chick)
ChickWeight[ChickWeight$Chick==,]
data(ChickWeight)
plot(ChickWeight$Time, ChickWeight$weight, col=ChickWeight$Diet)
head(ChickWeight)
chick = reshape(ChickWeight,idvar=c("Chick","Diet"),timevar="Time",direction="wide")
head(chick)
chick = na.omit(chick)
mean(c(chick$weight.4,3000))/mean(chick$weight.4)
median(c(chick$weight.4,3000))/median(chick$weight.4)
sd(c(chick$weight.4,3000))/sd(chick$weight.4)
mad(c(chick$weight.4,3000))/mad(chick$weight.4)
mean(c(chick$weight.4, 3000))/mean(chick$weight.4)
median(c(chick$weight.4, 3000))/median(chick$weight.4)
sd(c(chick$weight.4, 3000))/sd(chick$weight.4)
cor(c(chick$weight.4,3000), c(chick$weight.21,3000)) / cor(chick$weight.4, chick$weight.21)
x<-subset(chick$weight.4,chick$Diet==1)
y<-subset(chick$weight.4,chick$Diet==4)
t.test(c(x,200),y)$p.value
data(ChickWeight)
plot(ChickWeight$Time, ChickWeight$weight, col=ChickWeight$Diet)
head(ChickWeight)
chick = reshape(ChickWeight,idvar=c("Chick","Diet"),timevar="Time",direction="wide")
head(chick)
chick = na.omit(chick)
mean(c(chick$weight.4,3000))/mean(chick$weight.4)
median(c(chick$weight.4,3000))/median(chick$weight.4)
sd(c(chick$weight.4,3000))/sd(chick$weight.4)
mad(c(chick$weight.4,3000))/mad(chick$weight.4)
plot(chick$weight.4~chick$weight.21)
cor(c(chick$weight.4,3000),c(chick$weight.21,3000))/cor(chick$weight.4,chick$weight.21)
cor(c(chick$weight.4,3000),c(chick$weight.21,3000), method = 'spearman')/cor(chick$weight.4,chick$weight.21,method = 'spearman')
t.test(x,y+10)$statistic-t.test(x,y+100)$statistic
x<-subset(chick$weight.4,chick$Diet==1)
y<-subset(chick$weight.4,chick$Diet==4)
t.test(c(x,200),y)$p.value
# QUESTION 2.2
# What is the difference in t-test statistic (the statistic is obtained by t.test(x,y)$statistic) between adding 10 and adding 100 to all the values in the group 'y'?
t.test(x,y+10)$statistic-t.test(x,y+100)$statistic
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(swirl)
install_from_swirl("Exploratory Data Analysis")
switrl()
swirl()
`repdata.data.StormData.(1)` <- read.csv("C:/EMC/Cursos/GitHub/datasciencecoursera/Reproducible_Research_Proy2/repdata-data-StormData (1).csv")
View(`repdata.data.StormData.(1)`)
`repdata.data.StormData.(1)` <- read.csv("C:/EMC/Cursos/GitHub/datasciencecoursera/Reproducible_Research_Proy2/repdata-data-StormData (1).csv")
View(`repdata.data.StormData.(1)`)
data <- read.csv("repdata-data-StormData.csv")
getwd()
data <- read.csv("repdata-data-StormData.csv")
setwd("C:/EMC/Cursos/GitHub/datasciencecoursera/Reproducible_Research_Proy2/")
data <- read.csv("repdata-data-StormData.csv")
data <- read.csv("repdata-data-StormData.csv")
fileUrl <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2"
download.file(fileUrl, destfile = "data.csv.bz2")
stormdata <- read.csv("./data.csv.bz2")
getwd()
stormdata <- read.csv("./data.csv.bz2")
fileUrl <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2"
download.file(fileUrl, destfile = "data.csv.bz2")
data <- read.csv("data.csv.bz2")
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2")
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2","data.csv.bz2")
download.file(URL,"data.csv.bz2", method="libcurl")
download.file(URL,"data.csv.bz2")
data <- read.csv("data.csv.bz2")
View(data)
View(data)
Fatalities <- ttaply(data$EVTYPE, data$FATALITIES, sum)
?ttaply
Fatalities <- taply(data$EVTYPE, data$FATALITIES, sum)
?taply
Fatalities <- tapply(data$EVTYPE, data$FATALITIES, sum)
str(data)
table(data$EVTYPE)
sort(table(data$EVTYPE))
Fatalities <- tapply(data$FATALITIES, data$EVTYPE, sum)
table(Fatalities)
str(Fatalities)
histogram(Fatalities)
hist(Fatalities)
sort(Fatalities)
sort(Fatalities[1:10])
sort(Fatalities[-10:])
sort(Fatalities, decreasing = TRUE)
sort(Fatalities, decreasing = TRUE)[1:10]
Fatalist <- sort(Fatalities, decreasing = TRUE)[1:10]
hist(Fatalist)
names(Fatalist)
Fatalist <- sort(Fatalities, decreasing = TRUE)[1:5]
hist(Fatalist)
Fatal <- aggregate(FATALITIES ~ EVTYPE, data = data, FUN = sum)
table(FATAL$FATALITIES)
table(Fatal$FATALITIES)
Fatal <- sort(aggregate(FATALITIES ~ EVTYPE, data = data, FUN = sum), decreasing = T)
table(Fatal$FATALITIES)
Fatal <- sort(aggregate(FATALITIES ~ EVTYPE, data = data, FUN = sum), decreasing = T)[1:5]
table(Fatal$FATALITIES)
table(Fatal$FATALITIES[1:5])
library(ggplot2)
ggplot(Fatal[1:5, ], aes(EVTYPE, FATALITIES)) + geom_bar(stat = "identity") +
ylab("Fatalities") + xlab("Event Type") + ggtitle("Top Five Types of Events Causing Deaths Across the U.S")
fe <- aggregate(FATALITIES ~ EVTYPE, data = data, FUN = sum)
ofe <- fe[order(fe$FATALITIES, decreasing = T), ]
ggplot(ofe[1:5, ], aes(EVTYPE, FATALITIES)) + geom_bar(stat = "identity") +
ylab("Fatalities") + xlab("Event Type") + ggtitle("Top Five Types of Events Causing Deaths Across the U.S")
fe
ofe <- fe[order(fe$FATALITIES, decreasing = T), ][1:5]
ofe <- fe[order(fe$FATALITIES, decreasing = T), ][1:5,]
ggplot(ofe, ], aes(EVTYPE, FATALITIES)) + geom_bar(stat = "identity") +
ylab("Fatalities") + xlab("Event Type") + ggtitle("Top Five Types of Events Causing Deaths Across the U.S")
ggplot(ofe, aes(EVTYPE, FATALITIES)) + geom_bar(stat = "identity") +
ylab("Fatalities") + xlab("Event Type") + ggtitle("Top Five Types of Events Causing Deaths Across the U.S")
ggplot(ofe, aes(EVTYPE, FATALITIES)) + geom_bar(stat = "identity") +
ylab("Fatalities") + xlab("Event Type") + ggtitle("Top Five Types of Events Causing Deaths Across the U.S")
Fatal <- aggregate(FATALITIES ~ EVTYPE, data = data, FUN = sum)
Top5Fatal <- Fatal[order(Fatal$FATALITIES, decreasing = T), ][1:5,]
ggplot(Top5Fatal, aes(EVTYPE, FATALITIES)) + geom_bar(stat = "identity") +
ylab("Fatalities") + xlab("Event Type") + ggtitle("Top Five Types of Events Causing Deaths Across the U.S")
ggplot(Top5Fatal, aes(EVTYPE, FATALITIES)) + geom_bar(stat = "identity", colour = "Blur") +
ylab("Fatalities") + xlab("Event Type") + ggtitle("Top Five Types of Events Causing Deaths Across the U.S")
ggplot(Top5Fatal, aes(EVTYPE, FATALITIES)) + geom_bar(stat = "identity", colour = "Blue") +
ylab("Fatalities") + xlab("Event Type") + ggtitle("Top Five Types of Events Causing Deaths Across the U.S")
ggplot(Top5Fatal, aes(EVTYPE, FATALITIES)) + geom_bar(stat = "identity", fill = "Blue") +
ylab("Fatalities") + xlab("Event Type") + ggtitle("Top Five Types of Events Causing Deaths Across the U.S")
ggplot(Top5Fatal, aes(EVTYPE, FATALITIES)) + geom_bar(stat = "identity", fill = "Blue") +
ylab("Fatalities") + xlab("Weather Event Type") + ggtitle("Fatalities by Weather Event Type")
ggplot(Top5Fatal, aes(EVTYPE, FATALITIES)) + geom_bar(stat = "identity", fill = "Blue") +
ylab("Fatalities") + xlab("Weather Event Type") + ggtitle("Fatalities by Weather Event Type") +
legend.background = element_rect(fill = "white")
ggplot(Top5Fatal, aes(EVTYPE, FATALITIES)) + geom_bar(stat = "identity", fill = "Blue") +
ylab("Fatalities") + xlab("Weather Event Type") + ggtitle("Fatalities by Weather Event Type") +
element_rect(fill = "white")
ggplot(Top5Fatal, aes(EVTYPE, FATALITIES)) + geom_bar(stat = "identity", fill = "Blue") +
ylab("Fatalities") + xlab("Weather Event Type") + ggtitle("Fatalities by Weather Event Type") +
theme_bw()
ggplot(Top5Fatal, aes(EVTYPE, FATALITIES)) + geom_bar(stat = "identity", fill = "Blue") +
ylab("Fatalities") + xlab("Weather Event Type") + theme_bw() +
ggtitle("Fatalities by Weather Event Type")
data$PROPDMG <- data$PROPDMG * as.numeric(Recode(data$PROPDMGEXP,
"'0'=1;'1'=10;'2'=100;'3'=1000;'4'=10000;'5'=100000;'6'=1000000;'7'=10000000;'8'=100000000;'B'=1000000000;'h'=100;'H'=100;'K'=1000;'m'=1000000;'M'=1000000;'-'=0;'?'=0;'+'=0",
as.factor.result = FALSE))
library(reshape)
library(ggplot2)
library(car)
data$PROPDMG <- data$PROPDMG * as.numeric(Recode(data$PROPDMGEXP,
"'0'=1;'1'=10;'2'=100;'3'=1000;'4'=10000;'5'=100000;'6'=1000000;'7'=10000000;'8'=100000000;'B'=1000000000;'h'=100;'H'=100;'K'=1000;'m'=1000000;'M'=1000000;'-'=0;'?'=0;'+'=0",
as.factor.result = FALSE))
data$CROPDMG <- data$CROPDMG * as.numeric(Recode(data$CROPDMGEXP,
"'0'=1;'2'=100;'B'=1000000000;'k'=1000;'K'=1000;'m'=1000000;'M'=1000000;''=0;'?'=0",
as.factor.result = FALSE))
economic <- aggregate(cbind(PROPDMG, CROPDMG) ~ EVTYPE, data, sum)
eco <- melt(head(economic[order(-economic$PROPDMG, -economic$CROPDMG), ], 10))
ggplot(eco, aes(x = EVTYPE, y = value, fill = variable)) + geom_bar(stat = "identity") +
coord_flip() + ggtitle("Economic consequences") + labs(x = "", y = "cost of damages in dollars") +
scale_fill_manual(values = c("orange", "black"), labels = c("Property Damage",
"Crop Damage"))
ggplot(eco, aes(x = EVTYPE, y = value, fill = variable)) + geom_bar(stat = "identity") +
ggtitle("Economic Consequences By Weather Event Type") + labs(x = "", y = "cost of damages in dollars") +
scale_fill_manual(values = c("blue", "blue"), labels = c("Property Damage",
"Crop Damage"))
ggplot(eco, aes(x = EVTYPE, y = value, fill = variable)) + geom_bar(stat = "identity") +
ggtitle("Economic Consequences By Weather Event Type") + labs(x = "", y = "cost of damages in dollars") +
scale_fill_manual(values = c("blue", "blue"), labels = c("Property Damage",
"Crop Damage")) + + theme_bw()
ggplot(eco, aes(x = EVTYPE, y = value, fill = variable)) + geom_bar(stat = "identity") +
ggtitle("Economic Consequences By Weather Event Type") + labs(x = "", y = "cost of damages in dollars") +
scale_fill_manual(values = c("blue", "blue"), labels = c("Property Damage",
"Crop Damage")) + theme_bw()
eco <- melt(head(economic[order(-economic$PROPDMG, -economic$CROPDMG), ], 5))
ggplot(eco, aes(x = EVTYPE, y = value, fill = variable)) + geom_bar(stat = "identity") +
ggtitle("Economic Consequences By Weather Event Type") + labs(x = "", y = "cost of damages in dollars") +
scale_fill_manual(values = c("blue", "blue"), labels = c("Property Damage",
"Crop Damage")) + theme_bw()
eco <- melt(head(economic[order(-economic$PROPDMG, -economic$CROPDMG), ], 4))
ggplot(eco, aes(x = EVTYPE, y = value, fill = variable)) + geom_bar(stat = "identity") +
ggtitle("Economic Consequences By Weather Event Type") + labs(x = "", y = "cost of damages in dollars") +
scale_fill_manual(values = c("blue", "blue"), labels = c("Property Damage",
"Crop Damage")) + theme_bw()
economic <- aggregate(PROPDMG ~ EVTYPE, data, sum)
eco <- melt(head(economic[order(-economic$PROPDMG, ], 4))
eco <- melt(head(economic[order(-economic$PROPDMG, 4))
eco <- melt(head(economic[order(-economic$PROPDMG, 4]))
eco <- melt(head(economic[order(-economic$PROPDMG), 4]))
ggplot(eco, aes(x = EVTYPE, y = value, fill = variable)) + geom_bar(stat = "identity") +
ggtitle("Economic Consequences By Weather Event Type") + labs(x = "", y = "Cost in Dollars") +
scale_fill_manual(values = c("blue", "blue"), labels = c("Property Damage",
"Crop Damage")) + theme_bw()
eco
eco <- melt(head(economic[order(-economic$PROPDMG), ] ,4))
eco
ggplot(eco, aes(x = EVTYPE, y = value, fill = variable)) + geom_bar(stat = "identity") +
ggtitle("Economic Consequences By Weather Event Type") + labs(x = "", y = "Cost in Dollars") +
scale_fill_manual(values = c("blue", "blue"), labels = c("Property Damage",
"Crop Damage")) + theme_bw()
Cost <- aggregate(PROPDMG ~ EVTYPE, data, sum)
Cost <- melt(head(Cost[order(-Cost$PROPDMG), ] ,4))
eco
Cost
Cost <- melt(head(Cost[order(-Cost$PROPDMG), ] ,4))/1000000000
Cost <- melt(head(Cost[order(-Cost$PROPDMG), ] ,4))
Cost <- aggregate(PROPDMG ~ EVTYPE, data, sum)
Cost <- melt(head(Cost[order(-Cost$PROPDMG), ] ,4))/1000000000
Cost <- melt(head(Cost[order(-Cost$PROPDMG), ] ,4))
Cost <- aggregate(PROPDMG ~ EVTYPE, data, sum)
Cost
sort(Cost, decreasing = T)
sort(Cost$PROPDMG, decreasing = T)
sort(Cost$PROPDMG, decreasing = T)[1:5,]
sort(Cost$PROPDMG, decreasing = T)[1:5]
Cost <- sort(Cost$PROPDMG, decreasing = T)[1:5]
Cost
str(Cost)
Cost <- aggregate(PROPDMG ~ EVTYPE, data, sum)
order(-Cost$PROPDMG)
Cost <- melt(head(Cost[order(-Cost$PROPDMG), ] ,4))
ggplot(Cost, aes(x = EVTYPE, y = value, fill = variable)) + geom_bar(stat = "identity") +
ggtitle("Economic Consequences By Weather Event Type") + labs(x = "", y = "Cost in Dollars") +
scale_fill_manual(values = c("blue", "blue"), labels = c("Property Damage",
"Crop Damage")) + theme_bw()
Cost
Cost <- aggregate(PROPDMG ~ EVTYPE, data, sum)
sort(Cost$PROFMG)
sort(Cost$PRODMG)
sort(Cost$PROPDMG)
sort(Cost$PROPDMG, decreasing = T)
Cost[sort(Cost$PROPDMG, decreasing = T), ]
Cost <- aggregate(PROPDMG ~ EVTYPE, data, sum)
Top5Cost <- Cost[order(Cost$PROPDMG, decreasing = T), ][1:5,]
ggplot(Top5Cost, aes(x = EVTYPE, y = value, fill = variable)) + geom_bar(stat = "identity") +
ggtitle("Economic Consequences By Weather Event Type") + labs(x = "", y = "Cost in Dollars") +
scale_fill_manual(values = c("blue", "blue"), labels = c("Property Damage",
"Crop Damage")) + theme_bw()
Top5Cost <- Cost[order(Cost$PROPDMG, decreasing = T), ][1:5,]
ggplot(Top5Cost, aes(x = EVTYPE, y = value, fill = variable)) + geom_bar(stat = "identity") +
ggtitle("Economic Consequences By Weather Event Type") + labs(x = "", y = "Cost in Dollars") +
scale_fill_manual(values = c("blue", "blue"), labels = c("Property Damage",
"Crop Damage")) + theme_bw()
ggplot(Top5Cost, aes(x = EVTYPE, y = value, fill = variable)) + geom_bar(stat = "identity") +
ggtitle("Economic Consequences By Weather Event Type") + labs(x = "", y = "Cost in Dollars") +
scale_fill_manual(blue"), labels = c("Property Damage",
"Crop Damage")) + theme_bw()
ggplot(Top5Cost, aes(x = EVTYPE, y = value, fill = variable)) + geom_bar(stat = "identity") +
ggtitle("Economic Consequences By Weather Event Type") + labs(x = "", y = "Cost in Dollars") +
scale_fill_manual(blue") + theme_bw()
ggplot(Top5Cost, aes(EVTYPE, PROPDMG)) + geom_bar(stat = "identity", fill = "blue") +
ggtitle("Economic Consequences By Weather Event Type") + labs(x = "", y = "Cost in Dollars") +
theme_bw()
ggplot(Top5Cost, aes(EVTYPE, PROPDMG)) + geom_bar(stat = "identity", fill = "blue") +
ggtitle("Economic Consequences By Weather Event Type") + y("Cost in Dollars") +
theme_bw()
Top5Cost
ggplot(Top5Cost, aes(EVTYPE, PROPDMG)) + geom_bar(stat = "identity", fill = "blue") +
ggtitle("Economic Consequences By Weather Event Type") + ylab("Cost in Dollars") +
theme_bw()
Top5Cost <- Cost[order(Cost$PROPDMG, decreasing = T), ][1:5,]/1000000000
Top5Cost <- Cost[order(Cost$PROPDMG, decreasing = T), ][1:5,]
Top5Cost$PROPDMG <- Top5Cost$PROPDMG / 1000000000
ggplot(Top5Cost, aes(EVTYPE, PROPDMG)) + geom_bar(stat = "identity", fill = "blue") +
ggtitle("Economic Consequences By Weather Event Type") + ylab("Cost in Dollars") +
theme_bw()
ggplot(Top5Cost, aes(EVTYPE, PROPDMG)) + geom_bar(stat = "identity", fill = "blue") +
ggtitle("Economic Consequences By Weather Event Type") + ylab("Cost in Billions of Dollars") +
theme_bw()
ggplot(Top5Cost, aes(EVTYPE, PROPDMG)) + geom_bar(stat = "identity", fill = "blue") +
ggtitle("Economic Consequences By Weather Event Type") + ylab("Cost in Billions of Dollars") +
theme_bw() + xlab("Weather Event Type")
table(data$PROPDMGEXP)
data <- read.csv("data.csv.bz2")
Fatal <- aggregate(FATALITIES ~ EVTYPE, data = data, FUN = sum)
Top5Fatal <- Fatal[order(Fatal$FATALITIES, decreasing = T), ][1:5,]
ggplot(Top5Fatal, aes(EVTYPE, FATALITIES)) + geom_bar(stat = "identity", fill = "Blue") +
ylab("Fatalities") + xlab("Weather Event Type") + theme_bw() +
ggtitle("Fatalities by Weather Event Type")
data$PROPDMG <- data$PROPDMG * as.numeric(Recode(data$PROPDMGEXP,
"'0'=1;'1'=10;'2'=100;'3'=1000;'4'=10000;'5'=100000;'6'=1000000;'7'=10000000;'8'=100000000;'B'=1000000000;'h'=100;'H'=100;'K'=1000;'m'=1000000;'M'=1000000;'-'=0;'?'=0;'+'=0",
as.factor.result = FALSE))
Cost <- aggregate(PROPDMG ~ EVTYPE, data, sum)
Top5Cost <- Cost[order(Cost$PROPDMG, decreasing = T), ][1:5,]
Top5Cost$PROPDMG <- Top5Cost$PROPDMG / 1000000000
ggplot(Top5Cost, aes(EVTYPE, PROPDMG)) + geom_bar(stat = "identity", fill = "blue") +
ggtitle("Economic Consequences By Weather Event Type") + ylab("Cost in Billions of Dollars") +
theme_bw() + xlab("Weather Event Type")
Fatal <- aggregate(FATALITIES ~ EVTYPE, data = data, FUN = sum)
Top5Fatal <- Fatal[order(Fatal$FATALITIES, decreasing = T), ][1:5,]
ggplot(Top5Fatal, aes(EVTYPE, FATALITIES)) + geom_bar(stat = "identity", fill = "Blue") +
ylab("Fatalities") + xlab("Weather Event Type") + theme_bw() +
ggtitle("Fatalities by Weather Event Type")
data <- read.csv("data.csv.bz2")
Top4Fatal
Top5Fatal
Fatal <- aggregate(FATALITIES ~ EVTYPE, data = data, FUN = sum)
Top5Fatal <- Fatal[order(Fatal$FATALITIES, decreasing = T), ][1:5,]
Top5Fatal
data$BGN_DATE[1]
data$BGN_DATE[-1]
data$BGN_DATE[902297]
data$BGN_DATE[902290:902297]
Top5Cost
data$PROPDMG <- data$PROPDMG * as.numeric(Recode(data$PROPDMGEXP,
"'0'=1;'1'=10;'2'=100;'3'=1000;'4'=10000;'5'=100000;'6'=1000000;'7'=10000000;'8'=100000000;'B'=1000000000;'h'=100;'H'=100;'K'=1000;'m'=1000000;'M'=1000000;'-'=0;'?'=0;'+'=0",
as.factor.result = FALSE))
Cost <- aggregate(PROPDMG ~ EVTYPE, data, sum)
Top5Cost <- Cost[order(Cost$PROPDMG, decreasing = T), ][1:5,]
Top5Cost$PROPDMG <- Top5Cost$PROPDMG / 1000000000
Top5Cost
library("knitr")
knit2markdown
knit2html("Proyect2.Rmd")
